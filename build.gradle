apply plugin : 'c'
apply plugin: 'cunit-test-suite'

class TestInputsTask extends RuleSource {
    @Mutate void createCopyTask(ModelMap<Task> tasks) {
        def vmeInstall = tasks.get("installVmeTestCUnitExe")
        def taskName = "copyTestResources"
        def copyTask = tasks.create(taskName, Copy) {
            from project.getProjectDir().getAbsolutePath() + "/testFiles/input"
            into project.getBuildDir().getAbsolutePath() + "/test-results/vmeTest"
        }
        vmeInstall.dependsOn tasks[taskName]
    }
}
apply plugin: TestInputsTask

model {

    buildTypes {
        debug
//      release
    }

//  flavors {
//      passing
//      failing
//  }

    binaries {
        all {
            if (toolChain in Clang && buildType == buildTypes.debug) {
                cCompiler.args "-g"
                cCompiler.args "-O0"
                cCompiler.args "-Werror"
            }
//          if (toolChain in Clang && buildType == buildTypes.release) {
//              cCompiler.args "-O2"
//              cCompiler.args "-Werror"
//              //linker.args "-S"
//          }
        }
        withType(CUnitTestSuiteBinarySpec) {
            lib library: "cunit", linkage: "static"

//          if (flavor == flavors.failing) {
//              cCompiler.define "PLUS_BROKEN"
//          }
            cCompiler.define "CU_TEST"
        }
    }

    repositories {
        libs(PrebuiltLibraries) { 
            curl {
                headers.srcDir '/usr/include/curl'
                binaries.withType(PrebuiltSharedLibraryBinary) {
                    sharedLibraryFile = file("/usr/lib/libcurl.dylib")
                }
            }
            cunit {
                headers.srcDir "/usr/local/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile =
                        file("/usr/local/lib/libcunit.dylib")
                }
            }
        }
    }
    components {
        vme(NativeLibrarySpec) {
            sources {
                c.lib library : 'curl', linkage: 'shared'
            }
        }
        dpisim(NativeExecutableSpec) {
        }
        vipo(NativeExecutableSpec) {
            sources {
                c.lib library : 'curl', linkage: 'shared'
                c.lib library : 'vme', linkage: 'static'
            }
        }
    }

    testSuites {
        vmeTest(CUnitTestSuiteSpec) {
            testing $.components.vme
        }
    }
}

